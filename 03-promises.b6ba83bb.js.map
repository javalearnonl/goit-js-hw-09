{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA0CA,SAASC,EAAcC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAAOC,EAAnBH,EAAmBG,cAMxC,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACTJ,EAAgBE,EAAQ,CAAEJ,WAAUC,QAAOC,kBAAmBG,EAAO,CAAEL,WAAUC,QAAOC,iB,GACvFD,GAASD,EAAW,GAAKC,E,KA5CnB,CACXM,OAAQC,SAASC,cAAc,WAG5BF,OAAOG,iBAAiB,UAAU,SAAAC,GACrCA,EAAEC,iBACF,IAAMC,GAASF,EAAEG,OAAOC,SAASd,MAAMe,MAEjCC,GADQN,EAAEG,OAAOC,SAASG,KAAKF,OACrBL,EAAEG,OAAOC,SAASE,OAAOD,OASzC,SAASG,EAAcpB,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAAOC,EAAnBH,EAAmBG,cAClCkB,EAAiBlB,EACnBmB,EAAAzB,GAAS0B,OAAOC,QAChBF,EAAAzB,GAAS0B,OAAOE,QACpB,IACEJ,EAAe,KAAyDK,OAApDvB,EAAgB,YAAc,WAAW,aAA0BuB,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,CAC7F,MAAOyB,GACPC,QAAQD,MAAM,SAAUA,E,CAEtB1B,EAAWiB,IACbjB,IACAM,YAAW,WACTJ,EAAgB0B,KAAKC,SAAW,GAChC/B,EAAc,CAAEE,WAAUC,QAAOC,kBAC9B4B,KAAKX,GACLY,MAAMZ,E,GACRlB,G,CApBPH,EAAc,CAAEE,SAHD,EAGWC,MAAAY,EAAOX,cAF7B8B,YAGDF,KAAKX,GACLY,MAAMZ,GAsBTR,EAAEG,OAAOmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = +e.target.elements.delay.value;\n  const step = +e.target.elements.step.value;\n  const amount = +e.target.elements.amount.value;\n\n  let position = 1;\n  let shouldResolve;\n\n  createPromise({ position, delay, shouldResolve })\n    .then(handlePromise)\n    .catch(handlePromise);\n\n  function handlePromise({ position, delay, shouldResolve }) {\n    const notifyFunction = shouldResolve\n      ? Notiflix.Notify.success\n      : Notiflix.Notify.failure;\n    try {\n      notifyFunction(`âœ… ${shouldResolve ? 'Fulfilled' : 'Rejected'} promise ${position} in ${delay}ms`);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    if (position < amount) {\n      position++;\n      setTimeout(() => {\n        shouldResolve = Math.random() > 0.3;\n        createPromise({ position, delay, shouldResolve })\n          .then(handlePromise)\n          .catch(handlePromise);\n      }, delay);\n    }\n  }\n\n  e.target.reset();\n});\n\nfunction createPromise({ position, delay, shouldResolve }) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      shouldResolve ? resolve({ position, delay, shouldResolve }) : reject({ position, delay, shouldResolve });\n    }, delay + (position - 1) * delay);\n  });\n  return promise;\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","param","position","delay","shouldResolve","Promise","resolve","reject","setTimeout","formEl","document","querySelector","addEventListener","e","preventDefault","delay1","target","elements","value","amount","step","handlePromise","notifyFunction","$parcel$interopDefault","Notify","success","failure","concat","error","console","Math","random","then","catch","shouldResolve1","reset"],"version":3,"file":"03-promises.b6ba83bb.js.map"}