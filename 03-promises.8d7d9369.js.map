{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA0CA,SAASC,GAAcC,SAAEA,EAAQC,MAAEA,EAAKC,cAAEA,IAMxC,OALgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACTJ,EAAgBE,EAAQ,C,SAAEJ,E,MAAUC,E,cAAOC,IAAmBG,EAAO,C,SAAEL,E,MAAUC,E,cAAOC,GAAgB,GACvGD,GAASD,EAAW,GAAKC,EAAM,G,EA5CzB,CACXM,OAAQC,SAASC,cAAc,WAG5BF,OAAOG,iBAAiB,UAAUC,IACrCA,EAAEC,iBACF,MAAMC,GAASF,EAAEG,OAAOC,SAASd,MAAMe,MAEjCC,GADQN,EAAEG,OAAOC,SAASG,KAAKF,OACrBL,EAAEG,OAAOC,SAASE,OAAOD,OASzC,SAASG,GAAcnB,SAAEA,EAAQC,MAAEA,EAAKC,cAAEA,IACxC,MAAMkB,EAAiBlB,EACnBmB,EAAAxB,GAASyB,OAAOC,QAChBF,EAAAxB,GAASyB,OAAOE,QACpB,IACEJ,EAAe,KAAGlB,EAAe,YAAc,sBAAuBF,QAAeC,M,CACrF,MAAOwB,GACPC,QAAQD,MAAM,SAAUA,E,CAEtBzB,EAAWiB,IACbjB,IACAM,YAAW,KACTJ,EAAgByB,KAAKC,SAAW,GAChC7B,EAAc,C,SAAEC,E,MAAUC,E,cAAOC,IAC9B2B,KAAKV,GACLW,MAAMX,EAAc,GACtBlB,G,CApBPF,EAAc,CAAEC,SAHD,EAGWC,MAAAY,EAAOX,cAF7B6B,YAGDF,KAAKV,GACLW,MAAMX,GAsBTR,EAAEG,OAAOkB,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = +e.target.elements.delay.value;\n  const step = +e.target.elements.step.value;\n  const amount = +e.target.elements.amount.value;\n\n  let position = 1;\n  let shouldResolve;\n\n  createPromise({ position, delay, shouldResolve })\n    .then(handlePromise)\n    .catch(handlePromise);\n\n  function handlePromise({ position, delay, shouldResolve }) {\n    const notifyFunction = shouldResolve\n      ? Notiflix.Notify.success\n      : Notiflix.Notify.failure;\n    try {\n      notifyFunction(`âœ… ${shouldResolve ? 'Fulfilled' : 'Rejected'} promise ${position} in ${delay}ms`);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    if (position < amount) {\n      position++;\n      setTimeout(() => {\n        shouldResolve = Math.random() > 0.3;\n        createPromise({ position, delay, shouldResolve })\n          .then(handlePromise)\n          .catch(handlePromise);\n      }, delay);\n    }\n  }\n\n  e.target.reset();\n});\n\nfunction createPromise({ position, delay, shouldResolve }) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      shouldResolve ? resolve({ position, delay, shouldResolve }) : reject({ position, delay, shouldResolve });\n    }, delay + (position - 1) * delay);\n  });\n  return promise;\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Promise","resolve","reject","setTimeout","formEl","document","querySelector","addEventListener","e","preventDefault","delay1","target","elements","value","amount","step","handlePromise","notifyFunction","$parcel$interopDefault","Notify","success","failure","error","console","Math","random","then","catch","shouldResolve1","reset"],"version":3,"file":"03-promises.8d7d9369.js.map"}