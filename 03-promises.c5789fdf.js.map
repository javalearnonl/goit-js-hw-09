{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,GAAcC,SAAEA,EAAQC,MAAEA,IACjC,MAAMC,EAAgBC,KAAKC,SAAW,GAQtC,OAPgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACTN,EACII,EAAQ,C,SAAEN,E,MAAUC,IACpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAC9BA,EAAM,G,EA9CA,CACXQ,OAAQC,SAASC,cAAc,WAG5BF,OAAOG,iBAAiB,UAAUC,IACrCA,EAAEC,iBACF,MAAMC,GAASF,EAAEG,OAAOC,SAAShB,MAAMiB,MACjCC,GAAQN,EAAEG,OAAOC,SAASE,KAAKD,MAC/BE,GAAUP,EAAEG,OAAOC,SAASG,OAAOF,MAQzC,SAASG,GAAcrB,SAAEA,EAAQC,MAAEA,IACjC,MAAMC,EAAgBC,KAAKC,SAAW,GAChCkB,EAAiBpB,EACnBqB,EAAA1B,GAAS2B,OAAOC,QAChBF,EAAA1B,GAAS2B,OAAOE,QACpB,IACEJ,EAAe,KAAGpB,EAAgB,YAAc,sBAAwBF,QAAeC,EAAOD,EAAWmB,M,CACzG,MAAOQ,GACPC,QAAQD,MAAM,SAAUA,E,CAEtB3B,EAAWoB,IACbpB,IACAQ,YAAW,KACTT,EAAc,C,SAAEC,E,MAAUC,IACvB4B,KAAKR,GACLS,MAAMT,EAAc,GACtBF,G,CApBPpB,EAAc,CAAEC,SAFD,EAEWC,MAAAc,IACvBc,KAAKR,GACLS,MAAMT,GAsBTR,EAAEG,OAAOe,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = +e.target.elements.delay.value;\n  const step = +e.target.elements.step.value;\n  const amount = +e.target.elements.amount.value;\n\n  let position = 1;\n\n  createPromise({ position, delay })\n    .then(handlePromise)\n    .catch(handlePromise);\n\n  function handlePromise({ position, delay }) {\n    const shouldResolve = Math.random() > 0.3;\n    const notifyFunction = shouldResolve\n      ? Notiflix.Notify.success\n      : Notiflix.Notify.failure;\n    try {\n      notifyFunction(`âœ… ${ shouldResolve ? 'Fulfilled' : 'Rejected' } promise ${position} in ${delay + position * step}ms`);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    if (position < amount) {\n      position++;\n      setTimeout(() => {\n        createPromise({ position, delay })\n          .then(handlePromise)\n          .catch(handlePromise);\n      }, step);\n    }\n  }\n\n  e.target.reset();\n});\n\nfunction createPromise({ position, delay }) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      shouldResolve\n        ? resolve({ position, delay })\n        : reject({ position, delay });\n    }, delay);\n  });\n  return promise;\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","formEl","document","querySelector","addEventListener","e","preventDefault","delay1","target","elements","value","step","amount","handlePromise","notifyFunction","$parcel$interopDefault","Notify","success","failure","error","console","then","catch","reset"],"version":3,"file":"03-promises.c5789fdf.js.map"}